Introdução:
Este documento descreve a implementação de um jogo de Campo Minado em C. O projeto foi desenvolvido para ser funcional, organizado e modular. Ele utiliza alocação dinâmica para matrizes e oferece funcionalidades de log para registrar as interações do jogador e o estado do jogo, além de utilizar TAD (Tipos Abstratos de Dados).

Arquivos e Estrutura do Código:
Arquivo principal: campo_minado_matheussantarem.c

Objetivo: Contém a lógica principal do jogo, incluindo inicialização de variáveis, loop de interação com o usuário e encerramento.
Funções principais:
Inicialização de matrizes (visível e de bombas).
Gerenciamento da lógica de jogo (como abertura de células e verificações de vitória/derrota).
Registro de coordenadas e resultados no log.


matriz.h / matriz.c:
Objetivo: Implementar funcionalidades relacionadas à manipulação das matrizes do jogo.
Observação: Os protótipos de todas as funções abaixo estão arquivo "matriz.h", esse arquivo também contém a documentação de todas essas funções.
Funções :
1. void perguntaDificuldade(int *ordemMatriz, int *quantidadeMinas)
   - Descrição: Pergunta ao jogador sobre a dificuldade desejada e define o tamanho do campo e a quantidade de minas de acordo com a seleção.
   - Parâmetros:
     - int ordemMatriz: Ponteiro para a variável que armazena o tamanho do campo (número de linhas/colunas).
     - int quantidadeMinas: Ponteiro para a variável que armazena a quantidade de minas.

2. void alocaMatrizes(int ordemMatriz, int **matrizBomba, char **matrizVisivel)
   -Descrição: Aloca memória para as matrizes do jogo.
   - Parâmetros:
     - int ordemMatriz: Tamanho do campo.
     - int **matrizBomba: Matriz que contém a posição das minas.
     - char **matrizVisivel: Matriz que representa o estado visível do campo.

3. void inicializaMatrizVisivel(int ordemMatriz, char **matrizVisivel)
   -Descrição: Inicializa a matriz visível, preenchendo todas as células com 'X', que representa células fechadas.
   -Parâmetros:
     - int ordemMatriz: Tamanho do campo.
     - char **matrizVisivel: Matriz que será inicializada.

4. void sorteiaMinas(int tamanhoCampo, int quantidadeBombas, int **matrizCampo)
   - Descrição: Sorteia e coloca a quantidade especificada de minas na matriz do campo.
   - Parâmetros:
     - int tamanhoCampo: Tamanho do campo.
     - int quantidadeBombas: Quantidade de minas a serem sorteadas.
     - int **matrizCampo: Matriz que contém a posição das minas.

5. int verificaCoordenadaValida(int ordemMatriz, int linha, int coluna)
   - Descrição: Verifica se as coordenadas fornecidas estão dentro dos limites da matriz.
   - Parâmetros:
     - int ordemMatriz: Tamanho do campo.
     - int linha: Linha a ser verificada.
     - int coluna: Coluna a ser verificada.
   - Retorno: Retorna 1 se a coordenada for válida, caso contrário, retorna 0.

6. int quantidadeBombasVizinhanca(int linha, int coluna, int ordemMatriz, int **matrizBomba)
   - Descrição: Conta o número de minas nas células vizinhas da célula especificada.
   - Parâmetros:
     - int linha: Linha da célula a ser verificada.
     - int coluna: Coluna da célula a ser verificada.
     - int ordemMatriz: Tamanho do campo.
     - int **matrizBomba: Matriz que contém a posição das bombas.
   - Retorno: Retorna a quantidade de bombas nas células vizinhas.

7. void imprimeMatrizVisivel(int ordemMatriz, char **matrizVisivel)
   - Descrição: Imprime a matriz visível, mostrando o estado atual do jogo para o jogador.
   - Parâmetros:
     - int ordemMatriz: Tamanho do campo.
     - char **matrizVisivel: Matriz que representa o estado visível do campo.

8. int verificaVitoriaDerrota(int ordemMatriz, char **matrizVisivel, int **matrizBomba)
   - Descrição: Verifica se o jogador ganhou ou perdeu, retornando a quantidade de células que ainda precisam ser reveladas.
   - Parâmetros:
     - int ordemMatriz: Tamanho do campo.
     - char **matrizVisivel: Matriz que representa o estado visível do campo.
     - int **matrizBomba: Matriz que contém a posição das minas.
   - Retorno: Retorna a quantidade de células que ainda precisam ser reveladas.
9. void expandirCoordenada(int linha, int coluna, int ordemMatriz, char **matrizVisivel, int **matrizBomba)
   - Descrição: Essa função é responsável por mostrar quantas bombas tem ao redor da coordenada atual, caso esse número seja 0, ocorre a implementação do algoritmo recursivo "flood fill".
   - Parâmetros:
     - int linha: Linha da célula a ser verificada.
     - int coluna: Coluna da célula a ser verificada.
     - int ordemMatriz: Tamanho do campo.
     - char **matrizVisivel: Matriz que representa o estado visível do campo, essa função é a principal responsável por atualizar essa matriz ao longo do jogo.
     - int **matrizBomba: Matriz que contém a posição das bombas.
10. void jogar(int ordemMatriz, char **matrizVisivel, int **matrizBomba)
   - Descrição: Controla o fluxo do jogo, permitindo que o jogador escolha coordenadas e revele as células correspondentes. Usa também funções do arquivo "log.c", que servem para registrar o que está sendo impresso no terminal ao longo do jogo.
   - Parâmetros:
     - int ordemMatriz: Tamanho do campo.
     - char **matrizVisivel: Matriz que representa o estado visível do campo.
     - int **matrizBomba: Matriz que contém a posição das minas.

11. void imprimeMatrizBomba(int ordemMatriz, int **matrizBomba)
    - Descrição: Imprime a matriz original do campo de minas após o término do jogo, mostrando onde estavam as minas.
    - Parâmetros:
      - int ordemMatriz: Tamanho do campo.
      - int **matrizBomba`: Matriz que contém a posição das minas.

12. void liberaMemoria(int ordemMatriz, int **matrizBomba, char **matrizVisivel)
    - Descrição: Libera a memória alocada para as matrizes do jogo.
    - Parâmetros:
      - int ordemMatriz: Tamanho do campo.
      - int **matrizBomba: Matriz que contém a posição das minas.
      - char **matrizVisivel: Matriz que representa o estado visível do campo.
log.h / log.c:

Objetivo: Gerenciar o registro de eventos no arquivo de log (log.txt).
Funções principais:
Criação e abertura do arquivo de log.
Impressão das matrizes (visível e de bombas) no log.
Registro de ações do jogador, como coordenadas inválidas ou já escolhidas.
Funcionalidades Implementadas
Inicialização do Jogo

A matriz de bombas é gerada com posições aleatórias de bombas.
A matriz visível é preenchida com 'X' para representar células não abertas.
Registro de Log

Toda jogada é registrada no arquivo log.txt.
O log inclui:
-Data e hora de início do jogo.
-Matrizes visível e de bombas.
-Coordenadas digitadas e mensagens de erro em caso de entrada inválida.

Instruções de execução:
-Pré-requisitos:
	1. É necessário possuir algum compilador "C" instalado no seu sistema.
	2. É necessário possuir acesso a um terminal ou console do sistema.
	3. Todos os arquivos citados anteriormente precisam estar no mesmo diretório.
-Instruções:
	1. Abra o terminal ou console do seu sistema operacional e navegue até o diretório onde os arquivos se encontram.
	2. No terminal, digite "gcc campo_minado_matheussantarem.c -o campo_minado" para compilar o arquivo.
	3. Após a compilação, digite "./campo minado" para iniciar o jogo.
	4. Após essas etapas, é só jogar.

Interação com o Usuário:

O programa solicita coordenadas no formato "linha,coluna" para abrir células.
O jogador deve evitar:
-Coordenadas repetidas.
-Coordenadas fora do intervalo permitido.

Condições de Fim:

-Derrota: Se o jogador selecionar uma célula com bomba.
-Vitória: Quando todas as células sem bombas forem abertas.

Detalhes do Log:
-Estrutura do Log (log.txt):
	1. Data e hora do início do jogo.
	2. Jogadas realizadas com mensagens específicas:
		2.1. Coordenadas inválidas.
		2.2. Coordenadas já escolhidas.
	3. Estado completo da matriz visível após cada jogada.
	4. Matriz de bombas ao final do jogo.